// <auto-generated />
using System;
using CeceLearningPortal.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CeceLearningPortal.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250815060959_AddResourceHub")]
    partial class AddResourceHub
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NotificationPreferences")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccessDuration")
                        .HasColumnType("integer")
                        .HasColumnName("AccessDuration");

                    b.Property<int>("AccessType")
                        .HasColumnType("integer")
                        .HasColumnName("AccessType");

                    b.Property<bool>("AutomationAbandonmentSequence")
                        .HasColumnType("boolean")
                        .HasColumnName("AutomationAbandonmentSequence");

                    b.Property<bool>("AutomationCompletionCertificate")
                        .HasColumnType("boolean")
                        .HasColumnName("AutomationCompletionCertificate");

                    b.Property<bool>("AutomationProgressReminders")
                        .HasColumnType("boolean")
                        .HasColumnName("AutomationProgressReminders");

                    b.Property<bool>("AutomationWelcomeEmail")
                        .HasColumnType("boolean")
                        .HasColumnName("AutomationWelcomeEmail");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<int>("CourseType")
                        .HasColumnType("integer")
                        .HasColumnName("CourseType");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Currency");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("Discount")
                        .HasColumnType("integer")
                        .HasColumnName("discount");

                    b.Property<bool>("DripContent")
                        .HasColumnType("boolean")
                        .HasColumnName("DripContent");

                    b.Property<string>("DripScheduleJson")
                        .HasColumnType("text")
                        .HasColumnName("DripScheduleJson");

                    b.Property<string>("Duration")
                        .HasColumnType("text")
                        .HasColumnName("duration");

                    b.Property<int?>("EnrollmentLimit")
                        .HasColumnType("integer")
                        .HasColumnName("EnrollmentLimit");

                    b.Property<string>("EnrollmentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("enrollment_type");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("features");

                    b.Property<bool>("HasAssignments")
                        .HasColumnType("boolean")
                        .HasColumnName("HasAssignments");

                    b.Property<bool>("HasCertificate")
                        .HasColumnType("boolean")
                        .HasColumnName("HasCertificate");

                    b.Property<bool>("HasCommunity")
                        .HasColumnType("boolean")
                        .HasColumnName("HasCommunity");

                    b.Property<bool>("HasDownloadableResources")
                        .HasColumnType("boolean")
                        .HasColumnName("HasDownloadableResources");

                    b.Property<bool>("HasLiveSessions")
                        .HasColumnType("boolean")
                        .HasColumnName("HasLiveSessions");

                    b.Property<bool>("HasQuizzes")
                        .HasColumnType("boolean")
                        .HasColumnName("HasQuizzes");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("instructor_id");

                    b.Property<bool>("IsBestseller")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bestseller");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("IsPublished");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Language");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("level");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("original_price");

                    b.Property<string>("PaymentPlanDetailsJson")
                        .HasColumnType("text")
                        .HasColumnName("PaymentPlanDetailsJson");

                    b.Property<string>("PreviewUrl")
                        .HasColumnType("text")
                        .HasColumnName("preview_url");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("PricingModel")
                        .HasColumnType("integer")
                        .HasColumnName("PricingModel");

                    b.Property<string>("PromoVideoUrl")
                        .HasColumnType("text")
                        .HasColumnName("PromoVideoUrl");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("PublishedAt");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text")
                        .HasColumnName("ShortDescription");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int?>("SubscriptionPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("SubscriptionPeriod");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_courses");

                    b.HasIndex("Category");

                    b.HasIndex("InstructorId")
                        .HasDatabaseName("i_x_courses_instructor_id");

                    b.HasIndex("Status");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.CourseApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Feedback")
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reviewed_at");

                    b.Property<string>("ReviewedById")
                        .HasColumnType("text")
                        .HasColumnName("reviewed_by_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.Property<string>("SubmittedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("submitted_by_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_course_approvals");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("i_x_course_approvals_course_id");

                    b.HasIndex("ReviewedById")
                        .HasDatabaseName("i_x_course_approvals_reviewed_by_id");

                    b.HasIndex("SubmittedById")
                        .HasDatabaseName("i_x_course_approvals_submitted_by_id");

                    b.ToTable("course_approvals", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.CourseModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_course_modules");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("i_x_course_modules_course_id");

                    b.ToTable("course_modules", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("AverageQuizScore")
                        .HasColumnType("double precision")
                        .HasColumnName("average_quiz_score");

                    b.Property<bool>("CertificateIssued")
                        .HasColumnType("boolean")
                        .HasColumnName("certificate_issued");

                    b.Property<string>("CertificateUrl")
                        .HasColumnType("text")
                        .HasColumnName("certificate_url");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<int>("CompletedLessons")
                        .HasColumnType("integer")
                        .HasColumnName("completed_lessons");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enrolled_at");

                    b.Property<DateTime?>("LastAccessedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_accessed_date");

                    b.Property<double>("ProgressPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("progress_percentage");

                    b.Property<int?>("QuizCount")
                        .HasColumnType("integer")
                        .HasColumnName("quiz_count");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_id");

                    b.Property<int>("TotalTimeSpent")
                        .HasColumnType("integer")
                        .HasColumnName("total_time_spent");

                    b.HasKey("Id")
                        .HasName("p_k_enrollments");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("i_x_enrollments_course_id");

                    b.HasIndex("StudentId", "CourseId")
                        .IsUnique();

                    b.ToTable("enrollments", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.FileAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CdnUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("cdn_url");

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("checksum");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<string>("MetadataJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadata_json");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("mime_type");

                    b.Property<string>("OriginalFilename")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("original_filename");

                    b.Property<string>("OwnerUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_user_id");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_id");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("storage_key");

                    b.Property<string>("UploadStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("upload_status");

                    b.HasKey("Id")
                        .HasName("p_k_file_assets");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("i_x_file_assets_resource_id");

                    b.HasIndex("StorageKey")
                        .IsUnique();

                    b.ToTable("file_assets", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.InstructorApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("LinkedInProfile")
                        .HasColumnType("text")
                        .HasColumnName("linked_in_profile");

                    b.Property<string>("Qualifications")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("qualifications");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reviewed_at");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("text")
                        .HasColumnName("reviewed_by");

                    b.Property<string>("ReviewerNotes")
                        .HasColumnType("text")
                        .HasColumnName("reviewer_notes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.Property<string>("TeachingExperience")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("teaching_experience");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text")
                        .HasColumnName("website_url");

                    b.HasKey("Id")
                        .HasName("p_k_instructor_approvals");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("i_x_instructor_approvals_user_id");

                    b.ToTable("instructor_approvals", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("duration");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text")
                        .HasColumnName("video_url");

                    b.HasKey("Id")
                        .HasName("p_k_lessons");

                    b.HasIndex("ModuleId")
                        .HasDatabaseName("i_x_lessons_module_id");

                    b.ToTable("course_lessons", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.LessonProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignmentSubmissionUrl")
                        .HasColumnType("text")
                        .HasColumnName("assignment_submission_url");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer")
                        .HasColumnName("lesson_id");

                    b.Property<int?>("QuizScore")
                        .HasColumnType("integer")
                        .HasColumnName("quiz_score");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("p_k_lesson_progresses");

                    b.HasIndex("LessonId")
                        .HasDatabaseName("i_x_lesson_progresses_lesson_id");

                    b.HasIndex("StudentId", "LessonId")
                        .IsUnique();

                    b.ToTable("lesson_progress", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionUrl")
                        .HasColumnType("text")
                        .HasColumnName("action_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_notifications");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x_notifications_user_id");

                    b.ToTable("activities", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.PasswordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_password_histories");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x_password_histories_user_id");

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("text")
                        .HasColumnName("payment_intent_id");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_method");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text")
                        .HasColumnName("transaction_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_payments");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("i_x_payments_course_id");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("i_x_payments_subscription_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x_payments_user_id");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text")
                        .HasColumnName("replaced_by_token");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text")
                        .HasColumnName("revoked_by_ip");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_refresh_tokens");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Access")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("access");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<int>("Bookmarks")
                        .HasColumnType("integer")
                        .HasColumnName("bookmarks");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Downloads")
                        .HasColumnType("integer")
                        .HasColumnName("downloads");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<string>("ExternalUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_url");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("meta_title");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("mime_type");

                    b.Property<string>("OpenGraphImage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("open_graph_image");

                    b.Property<string>("OwnerUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_user_id");

                    b.Property<int?>("PageCount")
                        .HasColumnType("integer")
                        .HasColumnName("page_count");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<Guid?>("ReplacesResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("replaces_resource_id");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("section_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("slug");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("source");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("Views")
                        .HasColumnType("integer")
                        .HasColumnName("views");

                    b.HasKey("Id")
                        .HasName("p_k_resources");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ReplacesResourceId")
                        .HasDatabaseName("i_x_resources_replaces_resource_id");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("i_x_resources_section_id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("resources", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ResourceActivityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("action");

                    b.Property<string>("ActorUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actor_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload_json");

                    b.Property<Guid?>("TargetId")
                        .HasColumnType("uuid")
                        .HasColumnName("target_id");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("target_type");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.HasKey("Id")
                        .HasName("p_k_resource_activity_logs");

                    b.HasIndex("ActorUserId")
                        .HasDatabaseName("i_x_resource_activity_logs_actor_user_id");

                    b.ToTable("resource_activity_logs", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ResourceBookmark", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.HasKey("UserId", "ResourceId");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("i_x_resource_bookmarks_resource_id");

                    b.ToTable("resource_bookmarks", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ResourceComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean")
                        .HasColumnName("is_edited");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_comment_id");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_resource_comments");

                    b.HasIndex("ParentCommentId")
                        .HasDatabaseName("i_x_resource_comments_parent_comment_id");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("i_x_resource_comments_resource_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x_resource_comments_user_id");

                    b.ToTable("resource_comments", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ResourceHubAbout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CtaButtonsJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cta_buttons_json");

                    b.Property<string>("HeroImageUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("hero_image_url");

                    b.Property<string>("LastEditedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_edited_by_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_resource_hub_about");

                    b.HasIndex("LastEditedById")
                        .HasDatabaseName("i_x_resource_hub_about_last_edited_by_id");

                    b.ToTable("resource_hub_about", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ResourceResourceTag", b =>
                {
                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.HasKey("ResourceId", "TagId");

                    b.HasIndex("TagId")
                        .HasDatabaseName("i_x_resource_resource_tags_tag_id");

                    b.ToTable("resource_resource_tags", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ResourceSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Access")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("access");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("icon_url");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_featured");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_resource_sections");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("resource_sections", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ResourceTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer")
                        .HasColumnName("usage_count");

                    b.HasKey("Id")
                        .HasName("p_k_resource_tags");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("resource_tags", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_at");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text")
                        .HasColumnName("approved_by");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer")
                        .HasColumnName("course_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsFlagged")
                        .HasColumnType("boolean")
                        .HasColumnName("is_flagged");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("p_k_reviews");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("i_x_reviews_course_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("i_x_reviews_student_id");

                    b.ToTable("course_reviews", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.StudentProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("about");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_at");

                    b.Property<string>("ApprovedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("approved_by_id");

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("availability");

                    b.Property<string>("CertificationsJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("certifications_json");

                    b.Property<bool>("ConsentPublicListing")
                        .HasColumnType("boolean")
                        .HasColumnName("consent_public_listing");

                    b.Property<int>("ContactClicks")
                        .HasColumnType("integer")
                        .HasColumnName("contact_clicks");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("display_name");

                    b.Property<string>("FacebookUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("facebook_url");

                    b.Property<string>("GitHubUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("git_hub_url");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("headline");

                    b.Property<string>("HourlyRate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("hourly_rate");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("languages");

                    b.Property<string>("LinkedInUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("linked_in_url");

                    b.Property<string>("LocationCity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("location_city");

                    b.Property<string>("LocationCountry")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("location_country");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("photo_url");

                    b.Property<string>("PortfolioLinksJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("portfolio_links_json");

                    b.Property<int>("ProfileViews")
                        .HasColumnType("integer")
                        .HasColumnName("profile_views");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rejection_reason");

                    b.Property<string>("Services")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("services");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("skills");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("time_zone");

                    b.Property<string>("TwitterUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("twitter_url");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("website_url");

                    b.HasKey("Id")
                        .HasName("p_k_student_profiles");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("student_profiles", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("billing_cycle");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("NextBillingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_billing_date");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plan_name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("text")
                        .HasColumnName("stripe_subscription_id");

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_plan_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_subscriptions");

                    b.HasIndex("SubscriptionPlanId")
                        .HasDatabaseName("i_x_subscriptions_subscription_plan_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x_subscriptions_user_id");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("features");

                    b.Property<bool>("HasAnalytics")
                        .HasColumnType("boolean")
                        .HasColumnName("has_analytics");

                    b.Property<bool>("HasPrioritySupport")
                        .HasColumnType("boolean")
                        .HasColumnName("has_priority_support");

                    b.Property<bool>("HasUnlimitedAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("has_unlimited_access");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRecommended")
                        .HasColumnType("boolean")
                        .HasColumnName("is_recommended");

                    b.Property<int>("MaxCourseAccess")
                        .HasColumnType("integer")
                        .HasColumnName("max_course_access");

                    b.Property<int?>("MaxCoursesCanCreate")
                        .HasColumnType("integer")
                        .HasColumnName("max_courses_can_create");

                    b.Property<int?>("MaxStudentsPerCourse")
                        .HasColumnType("integer")
                        .HasColumnName("max_students_per_course");

                    b.Property<decimal>("MonthlyPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("monthly_price");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PlanType")
                        .HasColumnType("integer")
                        .HasColumnName("plan_type");

                    b.Property<decimal?>("TransactionFeePercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("transaction_fee_percentage");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("YearlyPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("yearly_price");

                    b.HasKey("Id")
                        .HasName("p_k_subscription_plans");

                    b.ToTable("subscription_plans", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Instructor",
                            NormalizedName = "INSTRUCTOR"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("p_k__asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("i_x__asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k__asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x__asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("p_k__asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x__asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("p_k__asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("i_x__asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("p_k__asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Course", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "Instructor")
                        .WithMany("InstructedCourses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_courses__asp_net_users_instructor_id");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.CourseApproval", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_course_approvals_courses_course_id");

                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("f_k_course_approvals__asp_net_users_reviewed_by_id");

                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("SubmittedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_course_approvals__asp_net_users_submitted_by_id");

                    b.Navigation("Course");

                    b.Navigation("ReviewedBy");

                    b.Navigation("SubmittedBy");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.CourseModule", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_course_modules_courses_course_id");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Enrollment", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_enrollments_courses_course_id");

                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_enrollments__asp_net_users_student_id");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.FileAsset", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "Owner")
                        .WithMany("FileAssets")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("f_k_file_assets__asp_net_users_owner_id");

                    b.HasOne("CeceLearningPortal.Api.Models.Resource", "Resource")
                        .WithMany("FileAssets")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("f_k_file_assets__resources_resource_id");

                    b.Navigation("Owner");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.InstructorApproval", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "User")
                        .WithOne("InstructorApproval")
                        .HasForeignKey("CeceLearningPortal.Api.Models.InstructorApproval", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_instructor_approvals__asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Lesson", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.CourseModule", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_lessons_course_modules_module_id");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.LessonProgress", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_lesson_progresses_lessons_lesson_id");

                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_lesson_progresses__asp_net_users_student_id");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Notification", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_notifications__asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.PasswordHistory", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "User")
                        .WithMany("PasswordHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_password_histories__asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Payment", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .HasConstraintName("f_k_payments_courses_course_id");

                    b.HasOne("CeceLearningPortal.Api.Models.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .HasConstraintName("f_k_payments__subscriptions_subscription_id");

                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_payments__asp_net_users_user_id");

                    b.Navigation("Course");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.RefreshToken", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_refresh_tokens__asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Resource", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "Owner")
                        .WithMany("OwnedResources")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("f_k_resources__asp_net_users_owner_id");

                    b.HasOne("CeceLearningPortal.Api.Models.Resource", "ReplacesResource")
                        .WithMany()
                        .HasForeignKey("ReplacesResourceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_resources_resources_replaces_resource_id");

                    b.HasOne("CeceLearningPortal.Api.Models.ResourceSection", "Section")
                        .WithMany("Resources")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_resources__resource_sections_section_id");

                    b.Navigation("Owner");

                    b.Navigation("ReplacesResource");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ResourceActivityLog", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "ActorUser")
                        .WithMany("ResourceActivityLogs")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("f_k_resource_activity_logs__asp_net_users_actor_user_id");

                    b.Navigation("ActorUser");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ResourceBookmark", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.Resource", "Resource")
                        .WithMany("ResourceBookmarks")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_resource_bookmarks_resources_resource_id");

                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "User")
                        .WithMany("ResourceBookmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_resource_bookmarks__asp_net_users_user_id");

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ResourceComment", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.ResourceComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("f_k_resource_comments_resource_comments_parent_comment_id");

                    b.HasOne("CeceLearningPortal.Api.Models.Resource", "Resource")
                        .WithMany("Comments")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_resource_comments_resources_resource_id");

                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "User")
                        .WithMany("ResourceComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_resource_comments__asp_net_users_user_id");

                    b.Navigation("ParentComment");

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ResourceHubAbout", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "LastEditedBy")
                        .WithMany()
                        .HasForeignKey("LastEditedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("f_k_resource_hub_about__asp_net_users_last_edited_by_id");

                    b.Navigation("LastEditedBy");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ResourceResourceTag", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.Resource", "Resource")
                        .WithMany("ResourceResourceTags")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_resource_resource_tags_resources_resource_id");

                    b.HasOne("CeceLearningPortal.Api.Models.ResourceTag", "Tag")
                        .WithMany("ResourceResourceTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_resource_resource_tags__resource_tags_tag_id");

                    b.Navigation("Resource");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Review", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_reviews_courses_course_id");

                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_reviews__asp_net_users_student_id");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.StudentProfile", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "User")
                        .WithOne("StudentProfile")
                        .HasForeignKey("CeceLearningPortal.Api.Models.StudentProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Subscription", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_subscriptions__subscription_plans_subscription_plan_id");

                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_subscriptions__asp_net_users_user_id");

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k__asp_net_role_claims__asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k__asp_net_user_claims__asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k__asp_net_user_logins__asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k__asp_net_user_roles__asp_net_roles_role_id");

                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k__asp_net_user_roles__asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CeceLearningPortal.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k__asp_net_user_tokens__asp_net_users_user_id");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ApplicationUser", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("FileAssets");

                    b.Navigation("InstructedCourses");

                    b.Navigation("InstructorApproval");

                    b.Navigation("Notifications");

                    b.Navigation("OwnedResources");

                    b.Navigation("PasswordHistories");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ResourceActivityLogs");

                    b.Navigation("ResourceBookmarks");

                    b.Navigation("ResourceComments");

                    b.Navigation("StudentProfile");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Modules");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.CourseModule", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.Resource", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FileAssets");

                    b.Navigation("ResourceBookmarks");

                    b.Navigation("ResourceResourceTags");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ResourceComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ResourceSection", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.ResourceTag", b =>
                {
                    b.Navigation("ResourceResourceTags");
                });

            modelBuilder.Entity("CeceLearningPortal.Api.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
